/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.javaScript.JavaScript;
import org.xtext.example.mydsl.javaScript.JavaScriptPackage;
import org.xtext.example.mydsl.javaScript.elems;
import org.xtext.example.mydsl.services.JavaScriptGrammarAccess;

@SuppressWarnings("all")
public class JavaScriptSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JavaScriptGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JavaScriptPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JavaScriptPackage.JAVA_SCRIPT:
				sequence_JavaScript(context, (JavaScript) semanticObject); 
				return; 
			case JavaScriptPackage.ELEMS:
				sequence_elems(context, (elems) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JavaScript returns JavaScript
	 *
	 * Constraint:
	 *     (name=ID elements=elems)
	 */
	protected void sequence_JavaScript(ISerializationContext context, JavaScript semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaScriptPackage.Literals.JAVA_SCRIPT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaScriptPackage.Literals.JAVA_SCRIPT__NAME));
			if (transientValues.isValueTransient(semanticObject, JavaScriptPackage.Literals.JAVA_SCRIPT__ELEMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaScriptPackage.Literals.JAVA_SCRIPT__ELEMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJavaScriptAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJavaScriptAccess().getElementsElemsParserRuleCall_3_0(), semanticObject.getElements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     elems returns elems
	 *
	 * Constraint:
	 *     (elements=funcs | elements=Boolean | elements=Ops)
	 */
	protected void sequence_elems(ISerializationContext context, elems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
