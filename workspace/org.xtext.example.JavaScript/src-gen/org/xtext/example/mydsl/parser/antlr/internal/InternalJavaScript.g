/*
 * generated by Xtext 2.12.0
 */
grammar InternalJavaScript;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.JavaScriptGrammarAccess;

}

@parser::members {

 	private JavaScriptGrammarAccess grammarAccess;

    public InternalJavaScriptParser(TokenStream input, JavaScriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "JavaScript";
   	}

   	@Override
   	protected JavaScriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleJavaScript
entryRuleJavaScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJavaScriptRule()); }
	iv_ruleJavaScript=ruleJavaScript
	{ $current=$iv_ruleJavaScript.current; }
	EOF;

// Rule JavaScript
ruleJavaScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getJavaScriptAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJavaScriptAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaScriptRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getJavaScriptAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJavaScriptAccess().getElementsElemsParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleelems
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJavaScriptRule());
					}
					set(
						$current,
						"elements",
						lv_elements_3_0,
						"org.xtext.example.mydsl.JavaScript.elems");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getJavaScriptAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleelems
entryRuleelems returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElemsRule()); }
	iv_ruleelems=ruleelems
	{ $current=$iv_ruleelems.current; }
	EOF;

// Rule elems
ruleelems returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElemsAccess().getElementsFuncsParserRuleCall_0_0());
				}
				lv_elements_0_0=rulefuncs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElemsRule());
					}
					set(
						$current,
						"elements",
						lv_elements_0_0,
						"org.xtext.example.mydsl.JavaScript.funcs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getElemsAccess().getElementsBooleanParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElemsRule());
					}
					set(
						$current,
						"elements",
						lv_elements_1_0,
						"org.xtext.example.mydsl.JavaScript.Boolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getElemsAccess().getElementsOpsParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleOps
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElemsRule());
					}
					set(
						$current,
						"elements",
						lv_elements_2_0,
						"org.xtext.example.mydsl.JavaScript.Ops");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOps
entryRuleOps returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpsRule()); }
	iv_ruleOps=ruleOps
	{ $current=$iv_ruleOps.current.getText(); }
	EOF;

// Rule Ops
ruleOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getOpsAccess().getINTTerminalRuleCall_0_0());
			}
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpsAccess().getPlusSignKeyword_0_1());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getOpsAccess().getINTTerminalRuleCall_0_2());
			}
		)
		    |
		(
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getOpsAccess().getINTTerminalRuleCall_1_0());
			}
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpsAccess().getHyphenMinusKeyword_1_1());
			}
			this_INT_5=RULE_INT
			{
				$current.merge(this_INT_5);
			}
			{
				newLeafNode(this_INT_5, grammarAccess.getOpsAccess().getINTTerminalRuleCall_1_2());
			}
		)
	)
;

// Entry rule entryRulefuncs
entryRulefuncs returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFuncsRule()); }
	iv_rulefuncs=rulefuncs
	{ $current=$iv_rulefuncs.current.getText(); }
	EOF;

// Rule funcs
rulefuncs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getFuncsAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getFuncsAccess().getINTTerminalRuleCall_1());
		}
		    |
		(
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getFuncsAccess().getINTTerminalRuleCall_2_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFuncsAccess().getFullStopKeyword_2_1());
			}
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getFuncsAccess().getINTTerminalRuleCall_2_2());
			}
		)
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
