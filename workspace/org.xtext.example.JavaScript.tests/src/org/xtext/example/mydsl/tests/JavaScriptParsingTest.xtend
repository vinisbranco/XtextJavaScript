/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.mydsl.javaScript.JavaScript

@RunWith(XtextRunner)
@InjectWith(JavaScriptInjectorProvider)
class JavaScriptParsingTest {
	@Inject
	ParseHelper<JavaScript> parseHelper
	
	@Test
	def void loadString() {
		val result = parseHelper.parse('''
			var t = "teste";
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	@Test
	def void loadInt() {
		val result = parseHelper.parse('''
			var t = 12;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	@Test
	def void loadDouble() {
		val result = parseHelper.parse('''
			var t = 2.1;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	@Test
	def void loadBoolean() {
		val result = parseHelper.parse('''
			var t = true;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	@Test
	def void loadSoma() {
		val result = parseHelper.parse('''
			var t = 2 + 2;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	@Test
	def void loadSub() {
		val result = parseHelper.parse('''
			var t = 2 - 2;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
}
